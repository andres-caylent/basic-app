steps:
# Build container image
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/andres-testing/nginx:latest', '.' ]
# Push container image to gcr
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'push', 'gcr.io/andres-testing/nginx:latest']

#  Copy the container image to gcr - it also shows the image in the build resutls at the build logs
#images:
#- 'gcr.io/caylent-testing/nginx:1.0.2'

#decrypts the alz-sa service account key from repo
#- name: gcr.io/cloud-builders/gcloud
#  args:
#  - kms
#  - decrypt
#  - --ciphertext-file=alz-sa-key.json.enc
#  - --plaintext-file=alz-sa-key.json
#  - --location=us-east1
#  - --keyring=caylent-testing-key-ring
#  - --key=caylent-testing-key
#  - --project=caylent-testing

# Getting the node public IP.
- id: whitelist
  name: "gcr.io/andres-testing/mybuilder:0.2.0"
  args: ['/bin/bash', 'script.sh']

## Describe the cluster
#- name: "gcr.io/andres-testing/cloud-sdk"
#  args: ["gcloud", "container", "clusters", "list", "--region", "us-west1-a", "--impersonate-service-account=gke-custom@andres-testing.iam.gserviceaccount.com"]

## Edit the whitelist
#- name: "gcr.io/cloud-builders/gcloud"
#  args: ["container", "clusters", "describe", "gke-e2e-demo", "--region", "us-west1-a", "--impersonate-service-account=gke-custom@andres-testing.iam.gserviceaccount.com"]  #args: ["container", "clusters", "list", "--region", "us-west1-a", "--impersonate-service-account=gke-custom@andres-testing.iam.gserviceaccount.com"]

#- name: google/cloud-sdk:latest
#- name: "gcr.io/andres-testing/cloud-sdk"
  #args: [ "cat /workspace/IP.json | export $IP=(cat /workspace/IP.json) | echo $IP"]
  #args: ["cat", "/workspace/IP.json"]
  #args: ["export", "$IP=(cat /workspace/IP.json)"]
  #args: ["echo", "$IP"]
  #args: ["export IP=$(cat /workspace/IP.json)", "&&", "gcloud", "container", "clusters", "update", "gke-e2e-demo", "--enable-master-authorized-networks", "--master-authorized-networks", "$IP", "--region", "us-west1-a", "--impersonate-service-account=gke-custom@andres-testing.iam.gserviceaccount.com"]

#gcloud container clusters describe gke-e2e-demo --region us-west1-a --impersonate-service-account=gke-custom@andres-testing.iam.gserviceaccount.com
#gcloud container clusters update gke-e2e-demo --enable-master-authorized-networks --master-authorized-networks $PUBLIC_IP/32 --region us-west1-a --impersonate-service-account=gke-custom@andres-testing.iam.gserviceaccount.com


## Deploy container image to GKE
- id: deployment
  name: "gcr.io/cloud-builders/gke-deploy"
  entrypoint: "bash"
  args:
    - "-c"
    - ../gke-deploy run --filename=resource1111.yml --location=us-west1-a --cluster="gke-e2e-demo"
    - |
      if [ $? -eq 0 ] then
        echo "Success: deployment was successfully" > /workspace/deployment-status.txt
      else
        echo "fail" > /workspace/deployment-status.txt
      fi
  waitFor: ['whitelist']

## Delete the node IP from the control plane endpoint whitelist
- id: whitelist_removal
  name: "gcr.io/andres-testing/mybuilder:0.2.0"
  args: ['/bin/bash', 'removeIP.sh']
  waitFor: ['whitelist', 'deployment']

- id: deployment_result
  name: "gcr.io/andres-testing/mybuilder:0.2.0"
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      if [[ $(< /workspace/deployment-status.txt) == "fail" ]]; then
        echo "deployment step failed, please check that step for further details"
        exit 1
      else
        echo "the deployment step was successfully"
        exit 0
      fi
  waitFor: ['whitelist', 'deployment', 'whitelist_removal']
